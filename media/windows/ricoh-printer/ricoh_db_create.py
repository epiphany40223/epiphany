#!/user/bin/env python3

# Script which runs daily to update staff print totals
# based on CSVs generated by the printer itself.

import sys
sys.path.insert(1, '../../python/')

import csv
import datetime
import sqlite3
from sqlite3 import Error

#import ECC
#import PDSChurch

from pprint import pprint

###########################################################

ricoh_db = "ricoh.db"
today = datetime.date.today()
#datestring = f'{today.year}{today.month}{today.day}'
debug_datestring = '20201013'
datestring = debug_datestring

def _strip(value):
    #The CSV puts brackets around values, which we don't want
    return value.strip('[').strip(']')

def load_latest_csv(filename):

    csv_rows = list()

    with open(filename, encoding='utf-8') as csvfile: #TODO: change to filename when retrieval is automated
        csvreader = csv.DictReader(csvfile)
        for row in csvreader:
            csv_rows.append(row)

    print(f"== Loaded {len(csv_rows)} staffers from latest CSV")
    return csv_rows

def extract_csv_data(csv_rows):

    def _extract_staffer(row, num, name):
        return {
            'num'           : num,
            'name'          : name,
            'total'         : int(row['Total Prints'].strip()),
            'b&wtotal'      : int(row['B & W(Total Prints)'].strip()),
            'colortotal'    : int(row['Color(Total Prints)'].strip()),
        }

    csv_staffers = list()

    for row in csv_rows:
        try:
            num = _strip(row['User'])
            name = _strip(row['Name'])
        except ValueError as e:
            print(e)
            num = '000'
            name = 'Other'
        this_staffer = _extract_staffer(row, num, name)
        csv_staffers.append(this_staffer)

    print(f"== Extracted {len(csv_staffers)} staffers")
    return csv_staffers


def write_to_db(csv, ricoh_db): # Connects to SQLite db, or creates it if it doesn't exist

    def  _insert_staffer(row, conn):
        c = conn.cursor()
        c.execute(f"""INSERT INTO 'printlog' (Date,User,Name,Total,BW,Color)
                      VALUES ('{datestring}','{row['num']}','{row['name']}','{row['total']}','{row['b&wtotal']}','{row['colortotal']}')""")

    conn = None

    try:
        conn = sqlite3.connect(ricoh_db)
        print(sqlite3.version)
    except Error as e:
        print(f'Connection: {e}')

    try:
        c = conn.cursor()
        c.execute(f"""CREATE TABLE IF NOT EXISTS printlog (
                                Key text PRIMARY KEY,
                                Date text NOT NULL,
                                User text NOT NULL,
                                Name text NOT NULL,
                                Total text NOT NULL,
                                BW text NOT NULL,
                                Color text NOT NULL
                        ); """)
    except Error as e:
        print(f'Alter Table: {e}')

    for row in csv:
        _insert_staffer(row, conn)
        pprint(f'Wrote {row} to the database')

    conn.commit()

    conn.close()


def main():

    #log = ECC.setup_logging(debug=False)

    filename = f'RICOH IM C4500_usercounter_{datestring}.csv'
    debug_filename = 'RICOH IM C4500_usercounter_20201013.csv'

    csv_rows= load_latest_csv(debug_filename)

    csv = extract_csv_data(csv_rows)

    write_to_db(csv, ricoh_db)

main()