#!/user/bin/env python3

# Script which runs daily to update staff print totals
# based on CSVs generated by the printer itself.

import sys
sys.path.insert(1, '../../../python/')

import ECC

import csv
import datetime
import sqlite3
from sqlite3 import Error

debug = True # puts the code in debug mode, TODO: turn off when ready to run

###########################################################

ricoh_db = "ricoh.db"
today = datetime.date.today()
datestring = f'{today.year}{today.month}{today.day}'


# removes brackets around the values from the csv
def _strip(value):
    return value.strip('[').strip(']')


# loads the new csv, returns list of the rows
def load_latest_csv(log, filename):

    csv_rows = list()

    with open(filename, encoding='utf-8') as csvfile:
        csvreader = csv.DictReader(csvfile)
        for row in csvreader:
            csv_rows.append(row)

    log.info(f"== Loaded {len(csv_rows)} staffers from latest CSV")
    return csv_rows


# extracts the data from the csv, returns list of staffers and their info
def extract_csv_data(log, csv_rows):

    def _extract_staffer(row):
        return {
            'department'                : row['User'].strip(),
            'name'                      : row['Name'].strip(),
            'total'                     : int(row['Total Prints'].strip()),
            'bwTotal'                   : int(row['B & W(Total Prints)'].strip()),
            'colorTotal'                : int(row['Color(Total Prints)'].strip()),
            'bwResult'                  : int(row['B & W:Result(Total Prints)'].strip()),
            'colorResult'               : int(row['Color:Result(Total Prints)'].strip()),
            'bwCopier'                  : int(row['Black & WhiteTotal(Copier/Document Server)'].strip()),
            'bwSmallCopier'             : int(row['Black & White(Small size)(Copier/Document Server)'].strip()),
            'bwLargeCopier'             : int(row['Black & White(Large size)(Copier/Document Server)'].strip()),
            'singleColorCopier'         : int(row['Single ColorTotal(Copier/Document Server)'].strip()),
            'singleColorSmallCopier'    : int(row['Single Color(Small size)(Copier/Document Server)'].strip()),
            'singleColorLargeCopier'    : int(row['Single Color(Large size)(Copier/Document Server)'].strip()),
            'twoColorCopier'            : int(row['Two-colorTotal(Copier/Document Server)'].strip()),
            'twoColorSmallCopier'       : int(row['Two-color(Small size)(Copier/Document Server)'].strip()),
            'twoColorLargeCopier'       : int(row['Two-color(Large size)(Copier/Document Server)'].strip()),
            'fullColorCopier'           : int(row['Full ColorTotal(Copier/Document Server)'].strip()),
            'fullColorSmallCopier'      : int(row['Full Color(Small size)(Copier/Document Server)'].strip()),
            'fullColorLargeCopier'      : int(row['Full Color(Large size)(Copier/Document Server)'].strip()),
            'bwPrinter'                 : int(row['Black & WhiteTotal(Printer)'].strip()),
            'bwSmallPrinter'            : int(row['Black & White(Small size)(Printer)'].strip()),
            'bwLargePrinter'            : int(row['Black & White(Large size)(Printer)'].strip()),
            'singleColorPrinter'        : int(row['Single ColorTotal(Printer)'].strip()),
            'singleColorSmallPrinter'   : int(row['Single Color(Small size)(Printer)'].strip()),
            'singleColorLargePrinter'   : int(row['Single Color(Large size)(Printer)'].strip()),
            'twoColorPrinter'           : int(row['Two-colorTotal(Printer)'].strip()),
            'twoColorSmallPrinter'      : int(row['Two-color(Small size)(Printer)'].strip()),
            'twoColorLargePrinter'      : int(row['Two-color(Large size)(Printer)'].strip()),
            'colorPrinter'              : int(row['ColorTotal(Printer)'].strip()),
            'colorSmallPrinter'         : int(row['Color(Small size)(Printer)'].strip()),
            'colorLargePrinter'         : int(row['Color(Large size)(Printer)'].strip()),
            'scannerTotal'              : int(row['ScannerTotal(Scanner)'].strip()),
            'bwScanner'                 : int(row['Black & WhiteTotal(Scanner)'].strip()),
            'bwSmallScanner'            : int(row['Black & White(Small size)(Scanner)'].strip()),
            'bwLargeScanner'            : int(row['Black & White(Large size)(Scanner)'].strip()),
            'colorScanner'              : int(row['Full ColorTotal(Scanner)'].strip()),
            'colorSmallScanner'         : int(row['Full Color(Small size)(Scanner)'].strip()),
            'colorLargeScanner'         : int(row['Full Color(Large size)(Scanner)'].strip()),
            'bwFax'                     : (row['Black & WhiteTotal(Fax)'].strip()),
            'bwSmallFax'                : (row['Black & White(Small size)(Fax)'].strip()),
            'bwLargeFax'                : (row['Black & White(Large size)(Fax)'].strip()),
            'colorFax'                  : (row['ColorTotal(Fax)'].strip()),
            'colorSmallFax'             : (row['Color(Small size)(Fax)'].strip()),
            'colorLargeFax'             : (row['Color(Large size)(Fax)'].strip()),
            'transmissionPagesFax'      : (row['Transmission Pages(Fax)'].strip()),
            'transmissionChargeFax'     : (row['Transmission Charge(Fax)'].strip()),
            'volumeUsed'                : (row['Volume Used(Print Volume Use Limitation)'].strip()),
            'limitValue'                : (row['Limit Value(Print Volume Use Limitation)'].strip()),
            'prevVolumeUsed'            : (row['Previous Volume Used(Print Volume Use Limitation)'].strip()),
            'lastResetDate'             : (row['Last Reset Date(Print Volume Use Limitation)'].strip()),
            'blackDev'                  : int(row['Black(Development)'].strip()),
            'colorDev'                  : int(row['Color (YMC)(Development)'].strip()),
            'twoSidedCopier'            : int(row['2 sided Sheets(Copier/Document Server)'].strip()),
            'combinedCopier'            : int(row['Combined Pages(Copier/Document Server)'].strip()),
            'twoSidedPrinter'           : int(row['2 sided Sheets(Printer)'].strip()),
            'combinedPrinter'           : int(row['Combined Pages(Printer)'].strip()),
        }

    csv_staffers = list()

    for row in csv_rows:
        this_staffer = _extract_staffer(row)
        csv_staffers.append(this_staffer)

    log.info(f"== Extracted {len(csv_staffers)} staffers")
    return csv_staffers


# connects to SQLite db, or creates it if it doesn't exist
def write_to_db(log, csv, ricoh_db):

    def  _insert_staffer(row, conn):
        c = conn.cursor()
        c.execute("""INSERT INTO 'printlog' (Date,Department,Name,Total,BWTotal,ColorTotal,BWResult,ColorResult,BWCopier,BWSmallCopier,BWLargeCopier,SingleColorCopier,SingleColorSmallCopier,SingleColorLargeCopier,TwoColorCopier,TwoColorSmallCopier,
                TwoColorLargeCopier,FullColorCopier,FullColorSmallCopier,FullColorLargeCopier,BWPrinter,BWSmallPrinter,
                BWLargePrinter,SingleColorPrinter,SingleColorSmallPrinter,SingleColorLargePrinter,TwoColorPrinter,TwoColorSmallPrinter,
                TwoColorLargePrinter,ColorPrinter,ColorSmallPrinter,ColorLargePrinter,ScannerTotal,BWScanner,BWSmallScanner,
                BWLargeScanner,ColorScanner,ColorSmallScanner,ColorLargeScanner,BWFax,BWSmallFax,BWLargeFax,ColorFax,ColorSmallFax,
                ColorLargeFax,TransmissionPagesFax,TransmissionChargeFax,VolumeUsed,LimitValue,PrevVolumeUsed,LastResetDate,BlackDev,
                ColorDev,TwoSidedCopier,CombinedCopier,TwoSidedPrinter,CombinedPrinter)
                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""",
                (datestring,
                row['department'],
                row['name'],
                row['total'],
                row['bwTotal'],
                row['colorTotal'],
                row['bwResult'],
                row['colorResult'],
                row['bwCopier'],
                row['bwSmallCopier'],
                row['bwLargeCopier'],
                row['singleColorCopier'],
                row['singleColorSmallCopier'],
                row['singleColorLargeCopier'],
                row['twoColorCopier'],
                row['twoColorSmallCopier'],
                row['twoColorLargeCopier'],
                row['fullColorCopier'],
                row['fullColorSmallCopier'],
                row['fullColorLargeCopier'],
                row['bwPrinter'],
                row['bwSmallPrinter'],
                row['bwLargePrinter'],
                row['singleColorPrinter'],
                row['singleColorSmallPrinter'],
                row['singleColorLargePrinter'],
                row['twoColorPrinter'],
                row['twoColorSmallPrinter'],
                row['twoColorLargePrinter'],
                row['colorPrinter'],
                row['colorSmallPrinter'],
                row['colorLargePrinter'],
                row['scannerTotal'],
                row['bwScanner'],
                row['bwSmallScanner'],
                row['bwLargeScanner'],
                row['colorScanner'],
                row['colorSmallScanner'],
                row['colorLargeScanner'],
                row['bwFax'],
                row['bwSmallFax'],
                row['bwLargeFax'],
                row['colorFax'],
                row['colorSmallFax'],
                row['colorLargeFax'],
                row['transmissionPagesFax'],
                row['transmissionChargeFax'],
                row['volumeUsed'],
                row['limitValue'],
                row['prevVolumeUsed'],
                row['lastResetDate'],
                row['blackDev'],
                row['colorDev'],
                row['twoSidedCopier'],
                row['combinedCopier'],
                row['twoSidedPrinter'],
                row['combinedPrinter']))

    conn = None

    try:
        conn = sqlite3.connect(ricoh_db)
        log.info(sqlite3.version)
    except Error as e:
        log.info(f'Connection: {e}')

    try:
        c = conn.cursor()
        c.execute(f"""CREATE TABLE IF NOT EXISTS printlog (
                                Key integer primary key,
                                Date text NOT NULL,
                                Department text NOT NULL,
                                Name text NOT NULL,
                                Total integer NOT NULL,
                                BWTotal integer NOT NULL,
                                ColorTotal integer NOT NULL,
                                BWResult integer NOT NULL,
                                ColorResult integer NOT NULL,
                                BWCopier integer NOT NULL,
                                BWSmallCopier integer NOT NULL,
                                BWLargeCopier integer NOT NULL,
                                SingleColorCopier integer NOT NULL,
                                SingleColorSmallCopier integer NOT NULL,
                                SingleColorLargeCopier integer NOT NULL,
                                TwoColorCopier integer NOT NULL,
                                TwoColorSmallCopier integer NOT NULL,
                                TwoColorLargeCopier integer NOT NULL,
                                FullColorCopier integer NOT NULL,
                                FullColorSmallCopier integer NOT NULL,
                                FullColorLargeCopier integer NOT NULL,
                                BWPrinter integer NOT NULL,
                                BWSmallPrinter integer NOT NULL,
                                BWLargePrinter integer NOT NULL,
                                SingleColorPrinter integer NOT NULL,
                                SingleColorSmallPrinter integer NOT NULL,
                                SingleColorLargePrinter integer NOT NULL,
                                TwoColorPrinter integer NOT NULL,
                                TwoColorSmallPrinter integer NOT NULL,
                                TwoColorLargePrinter integer NOT NULL,
                                ColorPrinter integer NOT NULL,
                                ColorSmallPrinter integer NOT NULL,
                                ColorLargePrinter integer NOT NULL,
                                ScannerTotal  integer NOT NULL,
                                BWScanner integer NOT NULL,
                                BWSmallScanner integer NOT NULL,
                                BWLargeScanner integer NOT NULL,
                                ColorScanner integer NOT NULL,
                                ColorSmallScanner integer NOT NULL,
                                ColorLargeScanner integer NOT NULL,
                                BWFax text NOT NULL,
                                BWSmallFax text NOT NULL,
                                BWLargeFax text NOT NULL,
                                ColorFax text NULL,
                                ColorSmallFax text NOT NULL,
                                ColorLargeFax text NOT NULL,
                                TransmissionPagesFax text NOT NULL,
                                TransmissionChargeFax text NOT NULL,
                                VolumeUsed text NOT NULL,
                                LimitValue text NOT NULL,
                                PrevVolumeUsed text NOT NULL,
                                LastResetDate text NOT NULL,
                                BlackDev integer NOT NULL,
                                ColorDev integer NOT NULL,
                                TwoSidedCopier integer NOT NULL,
                                CombinedCopier integer NOT NULL,
                                TwoSidedPrinter integer NOT NULL,
                                CombinedPrinter integer NOT NULL
                        ); """)
    except Error as e:
        log.info(f'Create Table: {e}')

    for row in csv:
        _insert_staffer(row, conn)
        log.debug(f'Wrote {row} to the database')

    conn.commit()

    conn.close()


def main():

    log = ECC.setup_logging(debug=debug)

    if (debug):
       datestring = '20201013'
    filename = f'RICOH IM C4500_usercounter_{datestring}.csv'

    csv_rows= load_latest_csv(log, filename)

    csv = extract_csv_data(log, csv_rows)

    write_to_db(log, csv, ricoh_db)

main()